> # ASSIGNMENT/CLASSWORK - OCTOBER 21ST, 2023
> 
> # variable_assignment  ----------------------------------------------------
> 
> list_numericvectors_1 <- list(a = 1:19, b = -12:-16, c = seq(11, 12, length.out = 11))
> master_data <- iris
> matrix_numeric_1 <- matrix(1:16, nrow = 4, byrow = T)
> vector_names <- c('Constantin Valdor','Trajann Valoris','Valerian','Amon Tauromachian','Ravathain')
> 
> # apply_functions  ----------------------------------------------------
> 
> apply(matrix_numeric_1, 1, FUN = sum)
[1] 10 26 42 58
> apply(matrix_numeric_1, 2, FUN = sum)
[1] 28 32 36 40
> apply(matrix_numeric_1, 2, FUN = mean)
[1]  7  8  9 10
> # Margin (Arg2) => 1: row_wise | 2: column_wise
> 
> lapply(vector_names, FUN = tolower)
[[1]]
[1] "constantin valdor"

[[2]]
[1] "trajann valoris"

[[3]]
[1] "valerian"

[[4]]
[1] "amon tauromachian"

[[5]]
[1] "ravathain"

> lapply(vector_names, FUN = nchar)
[[1]]
[1] 17

[[2]]
[1] 15

[[3]]
[1] 8

[[4]]
[1] 17

[[5]]
[1] 9

> # Apply is for numeric data stores, lapply causes coercion of result to a list
> unlist(lapply(vector_names, FUN = nchar)) 
[1] 17 15  8 17  9
> # Use unlist to convert to vector or use sapply
> 
> sapply(vector_names,FUN = toupper)
  Constantin Valdor     Trajann Valoris            Valerian 
"CONSTANTIN VALDOR"   "TRAJANN VALORIS"          "VALERIAN" 
  Amon Tauromachian           Ravathain 
"AMON TAUROMACHIAN"         "RAVATHAIN" 
> sapply(vector_names,simplify = F,FUN = toupper)
$`Constantin Valdor`
[1] "CONSTANTIN VALDOR"

$`Trajann Valoris`
[1] "TRAJANN VALORIS"

$Valerian
[1] "VALERIAN"

$`Amon Tauromachian`
[1] "AMON TAUROMACHIAN"

$Ravathain
[1] "RAVATHAIN"

> # simplify (arg 2) => def: TRUE // FALSE yields a list
> # named vector is created, names are original values of elements.
> sapply(vector_names,FUN = nchar)
Constantin Valdor   Trajann Valoris          Valerian 
               17                15                 8 
Amon Tauromachian         Ravathain 
               17                 9 
> # sapply works on a vector, list, or DF
> 
> 
> # case_study_1 ----------------------------------------------------
> 
> summary(master_data)
  Sepal.Length    Sepal.Width     Petal.Length  
 Min.   :4.300   Min.   :2.000   Min.   :1.000  
 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600  
 Median :5.800   Median :3.000   Median :4.350  
 Mean   :5.843   Mean   :3.057   Mean   :3.758  
 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100  
 Max.   :7.900   Max.   :4.400   Max.   :6.900  
  Petal.Width          Species  
 Min.   :0.100   setosa    :50  
 1st Qu.:0.300   versicolor:50  
 Median :1.300   virginica :50  
 Mean   :1.199                  
 3rd Qu.:1.800                  
 Max.   :2.500                  
> 
> tapply(iris$Sepal.Length, iris$Species,mean)
    setosa versicolor  virginica 
     5.006      5.936      6.588 
> # data is broken down into subsets based on INDEX (arg 2)
> tapply(iris$Sepal.Width, iris$Species,median)
    setosa versicolor  virginica 
       3.4        2.8        3.0 